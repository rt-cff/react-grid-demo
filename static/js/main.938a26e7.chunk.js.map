{"version":3,"sources":["react-grid/header-cell.component.jsx","react-grid/header.component.jsx","react-grid/cell.component.jsx","react-grid/row.component.jsx","react-grid/mask.component.jsx","react-grid/hooks/useVirtualization.js","react-grid/hooks/useGrid.js","react-grid/hooks/useMask.js","react-grid/utils.js","react-grid/index.js","react-grid/grid.component.jsx","App.js","serviceWorker.js","index.js"],"names":["memo","HeaderCell","x","y","col","className","style","width","name","forwardRef","Header","ref","cols","map","Cell","columnIndex","rowIndex","data","setMask","handleClick","useCallback","onClick","Row","cells","useMemo","i","key","type","id","ARROW_CODE","Mask","left","top","value","defaultValue","onChange","containerNode","useRef","maskNode","inputNode","useState","active","setActive","setValue","toggleActive","prevActive","handleBlur","handleKeyDown","e","target","keyCode","current","includes","preventDefault","useEffect","console","log","focus","scrollIntoView","block","inline","tabIndex","onKeyDown","autoFocus","onBlur","handleChange","parseFloat","isNaN","useVirtualization","start","setStart","end","setEnd","slice","handleScroll","scrollLeft","scrollTop","Math","max","floor","min","length","useGrid","headerNode","vData","topOffset","_handleScroll","useMask","setX","setY","reduce","res","setScrollBarSizeCSSVariable","document","documentElement","setProperty","getScrollbarSize","size","scrollDiv","createElement","position","height","overflow","body","appendChild","offsetWidth","clientWidth","removeChild","Grid","onRowClick","createRef","contentNode","maskProps","rows","d","containerStyle","onDataChange","rowId","row","onScroll","_data","_range","n","amount","random","quantity","App","setState","setData","margin","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","unregister","navigator","serviceWorker","ready","then","registration","catch","error","message"],"mappings":"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","file":"static/js/main.938a26e7.chunk.js","sourcesContent":["import React, {memo, useCallback} from 'react'\r\n\r\nconst HeaderCell = ({x, y, col}) => {\r\n    return (\r\n        <div className = 'react-grid-header-cell' style = {{\r\n            width: col.width, \r\n            // left: offset, \r\n        }}\r\n        >\r\n            {col.name}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default memo(HeaderCell)","import React, {memo, forwardRef} from 'react'\r\n\r\nimport HeaderCell from './header-cell.component'\r\n\r\nconst Header = ({cols}, ref) => {\r\n\r\n    return (\r\n        <div ref = {ref} className = 'react-grid-header'>\r\n            {cols.map(col => <HeaderCell col = {col} />)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default memo(forwardRef(Header))","import React, {memo, useCallback} from 'react'\r\n\r\nconst formatData = (data, type) => {\r\n    switch(type) {\r\n        case 'number':\r\n            return data\r\n        default:\r\n            return data;\r\n    }\r\n}\r\n\r\nconst Cell = ({columnIndex, rowIndex, data, width, setMask}) => {\r\n    const handleClick = useCallback(() => setMask(columnIndex, rowIndex), [setMask, columnIndex, rowIndex])\r\n\r\n    return (\r\n        <div \r\n            className = 'react-grid-cell' \r\n            style = {{\r\n                width, \r\n            }}\r\n            onClick = {handleClick}\r\n        >\r\n            {data}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default memo(Cell)","import React, {memo, useMemo} from 'react'\r\n\r\nimport Cell from './cell.component'\r\n\r\nconst Row = ({rowIndex, cols, data, setMask}) => {\r\n    const cells = useMemo(\r\n        () => cols.map((col, i) => \r\n                <Cell \r\n                    key = {i}  \r\n                    rowIndex = {rowIndex}\r\n                    columnIndex = {i}\r\n                    type = {col.type}\r\n                    data = {data[col.id]}\r\n                    width = {col.width}\r\n                    setMask = {setMask}\r\n                />\r\n            ), \r\n        [rowIndex, cols, data, setMask]\r\n    )\r\n    \r\n    return (\r\n        <div className = 'react-grid-row'>\r\n            {cells}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default memo(Row)","import React, {useRef, useState, useEffect, useCallback} from 'react'\r\n\r\n// < 37 ^ 38 > 39 v 40\r\nconst ARROW_CODE = [37, 38, 39, 40]\r\n\r\nconst Mask = ({setMask, x, y, left, top, value: defaultValue = null, onChange, width, type}) => {\r\n    const containerNode = useRef(null), maskNode = useRef(null), inputNode = useRef(null)\r\n    const [active, setActive] = useState(false)\r\n    const [value, setValue] = useState(defaultValue)\r\n\r\n    const toggleActive = useCallback(() => setActive(prevActive => !prevActive), [])\r\n    \r\n    const handleChange = e => {\r\n        const {type} = e.target\r\n        let {value} = e.target\r\n\r\n        if(type === 'number') {\r\n            value = parseFloat(value)\r\n            \r\n            if(isNaN(value)) return\r\n        }\r\n  \r\n        setValue(value)\r\n    }\r\n    \r\n    const handleBlur = useCallback(() => {\r\n        toggleActive()\r\n        \r\n        if(defaultValue === value)\r\n            return\r\n        \r\n        onChange(value)\r\n\r\n    }, [toggleActive, defaultValue, value])\r\n    \r\n    const handleKeyDown = useCallback(e => {\r\n        const {target, keyCode} = e\r\n\r\n        if(target === containerNode.current) {\r\n            if(ARROW_CODE.includes(keyCode))\r\n                setMask(x + (keyCode - 38) % 2, y + (keyCode - 39) % 2)\r\n                // setMask(mask => ({\r\n                //     x: mask.x + (keyCode - 38) % 2, \r\n                //     y: mask.y + (keyCode - 39) % 2, \r\n                // }))\r\n\r\n            if(keyCode === 13) \r\n                toggleActive()\r\n            \r\n            e.preventDefault()\r\n        }\r\n\r\n        if(target === inputNode.current) {\r\n            if(keyCode === 27)\r\n                setActive(false)\r\n\r\n            if(keyCode === 13) {\r\n                handleBlur()\r\n            }\r\n        }\r\n    }, [x, y, setMask, toggleActive, handleBlur])\r\n\r\n\r\n    useEffect(() => {\r\n        //re-init mask value if different cells/default value are used\r\n        setValue(defaultValue)\r\n    }, [x, y, defaultValue])\r\n\r\n    useEffect(() => {\r\n        if(containerNode && containerNode.current && !active) {\r\n            console.log('focus')\r\n            containerNode.current.focus()\r\n            containerNode.current.scrollIntoView({block: 'nearest', inline: 'nearest'})\r\n        }\r\n    }, [x, y, active])\r\n\r\n    if(!(x >= 0 && y >= 0))\r\n        return null\r\n\r\n    return (\r\n        <div \r\n            className = 'react-grid-mask-container'\r\n            tabIndex = {0}\r\n            ref = {containerNode}\r\n            style = {{\r\n                width, \r\n                top, \r\n                left, \r\n            }}\r\n            onKeyDown = {handleKeyDown}\r\n        >\r\n            {\r\n                active ?\r\n                <input \r\n                    autoFocus\r\n                    ref = {inputNode}\r\n                    className = 'react-grid-mask-input' \r\n                    onBlur = {handleBlur}\r\n                    onChange = {handleChange}\r\n                    defaultValue = {value}\r\n                    type = {type || 'text'}\r\n                /> :\r\n                <div \r\n                    className = 'react-grid-mask'\r\n                    ref = {maskNode}\r\n                    onClick = {toggleActive}\r\n                />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Mask","import {useState} from 'react'\r\n\r\nconst useVirtualization = (data) => {\r\n    const [start, setStart] = useState(0), [end, setEnd] = useState(100)\r\n\r\n    const handleScroll = e => {\r\n        const {scrollLeft, scrollTop} = e.target\r\n        \r\n        console.log(scrollTop, scrollLeft)\r\n\r\n        const start = Math.max(0, Math.floor(scrollTop/30) - 30)\r\n        const end = Math.min(data.length, start + 100)\r\n\r\n        setStart(start)\r\n        setEnd(end)\r\n    }\r\n\r\n    return [\r\n        data.slice(start, end),  \r\n        start, \r\n        handleScroll, \r\n    ]\r\n}\r\n\r\nexport default useVirtualization","import {} from 'react'\r\n\r\nimport useVirtualization from './useVirtualization'\r\n\r\nconst useGrid = (data, headerNode) => {\r\n    const [vData, topOffset, _handleScroll] = useVirtualization(data)\r\n    \r\n    const handleScroll = (e) => {\r\n        _handleScroll(e)\r\n\r\n        headerNode.current.scrollLeft = e.target.scrollLeft\r\n    }\r\n\r\n    return [vData, topOffset, handleScroll]\r\n}\r\n\r\nexport default useGrid","import {useState, useCallback} from 'react'\r\n\r\nconst useMask = (cols) => {\r\n    const [x, setX] = useState()\r\n    const [y, setY] = useState()\r\n    const col = x >= 0 ? cols[x] : {}\r\n    const setMask = useCallback((x, y) => {\r\n        setX(x)\r\n        setY(y)\r\n    }, [setX, setY])\r\n\r\n    return {\r\n        x, \r\n        y, \r\n        left: cols.slice(0, x).reduce((res, col) => res += col.width, 0), \r\n        top: y * 30, \r\n        width: col.width,\r\n        type: col.type,\r\n        setMask, \r\n    }\r\n}\r\n\r\nexport default useMask","//utils function from react-data-grid\r\nexport const getScrollbarSize = () => {\r\n    let size = 0\r\n    const scrollDiv = document.createElement('div')\r\n\r\n    scrollDiv.style.position = 'absolute'\r\n    scrollDiv.style.top = '-9999px'\r\n    scrollDiv.style.width = '50px'\r\n    scrollDiv.style.height = '50px'\r\n    scrollDiv.style.overflow = 'scroll'\r\n\r\n    document.body.appendChild(scrollDiv)\r\n    size = scrollDiv.offsetWidth - scrollDiv.clientWidth\r\n    document.body.removeChild(scrollDiv)\r\n\r\n    return size\r\n}\r\n\r\nexport const setScrollBarSizeCSSVariable = () => {\r\n    document.documentElement.style.setProperty('--scroll-bar-size', getScrollbarSize() + 'px');\r\n}","import Grid from './grid.component'\r\n\r\nexport default Grid","import React, {memo, createRef, useRef, useMemo, useEffect, useCallback} from 'react'\r\n\r\nimport Header from './header.component'\r\nimport Row from './row.component'\r\nimport Mask from './mask.component'\r\n\r\nimport useGrid from './hooks/useGrid'\r\nimport useMask from './hooks/useMask'\r\n\r\nimport {setScrollBarSizeCSSVariable} from './utils'\r\n\r\nimport './grid.styles.scss'\r\n\r\nconst Grid = ({\r\n    cols = [],\r\n    data = [], \r\n    onRowClick, \r\n    style = {}, \r\n    height, \r\n    width, \r\n    onChange, \r\n}) => {\r\n    const headerNode = createRef(), contentNode = useRef()\r\n    const {setMask, x, y, ...maskProps} = useMask(cols)\r\n// [maskX, maskY, maskLeft, maskTop, maskWidth, setMask] = \r\n    const [vData, start, handleScroll] = useGrid(data, headerNode)\r\n    const rows = useMemo(\r\n        () => vData.map((d, y) => \r\n            <Row \r\n                key = {start + y} \r\n                rowIndex = {start + y} \r\n                cols = {cols} \r\n                data = {d} \r\n                onRowClick = {onRowClick} \r\n                setMask = {setMask}\r\n            />), \r\n        [vData, start, cols, onRowClick, setMask]\r\n    )\r\n\r\n    useEffect(() => {\r\n        setScrollBarSizeCSSVariable()\r\n    }, [])\r\n\r\n    const containerStyle = {\r\n        ...style, \r\n        height, \r\n        width\r\n    }\r\n\r\n    const onDataChange = useCallback((value) => onChange({\r\n        rowId: y,\r\n        row: data[y],\r\n        id: cols[x].id,\r\n        value, \r\n    }), [x, y, data, cols])\r\n\r\n    return (\r\n        <div style = {containerStyle} className = 'react-grid'>\r\n            <Header ref = {headerNode} cols = {cols} />\r\n            <div \r\n                ref = {contentNode} \r\n                className = 'react-grid-content'\r\n                onScroll = {handleScroll}\r\n            >\r\n                <div                \r\n                    style = {{\r\n                        height: data.length * 30,\r\n                    }}\r\n                >\r\n                    <Mask \r\n                        {...maskProps}\r\n                        x = {x}\r\n                        y = {y}\r\n                        value = {\r\n                            x >= 0 && y >= 0 ? \r\n                            data[y][cols[x].id] : \r\n                            null\r\n                        }\r\n                        onChange = {onDataChange}\r\n                        setMask = {setMask}\r\n                    />\r\n                    <div style = {{\r\n                        position: 'absolute',\r\n                        top: start * 30, \r\n                    }}>\r\n                        {rows}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default memo(Grid)","import React, {useState} from 'react';\n\nimport Grid from './react-grid'\n\nimport _range from 'lodash/range'\n\nconst cols = [\n  {id: 'type', name: 'Type', width: 300},\n  {id: 'quantity', name: 'Quantity', type: 'number', width: 100},\n  {id: 'amount', name: 'Amount', type: 'number', width: 300},\n  {id: 'type', name: 'Type', width: 300},\n  {id: 'quantity', name: 'Quantity', type: 'number', width: 100},\n  {id: 'amount', name: 'Amount', type: 'number', width: 300},\n  {id: 'type', name: 'Type', width: 300},\n  {id: 'quantity', name: 'Quantity', type: 'number', width: 100},\n  {id: 'amount', name: 'Amount', type: 'number', width: 300},\n]\n\nconst _data = _range(10000).map(n => ({\n  type: '3321', amount: Math.random() * 100, quantity: n\n})) \n\nfunction App() {\n  const [state, setState] = useState(0)\n  const [data, setData] = useState(_data)\n\n  const onChange = ({rowId, row, id, value}) => {\n    console.log(rowId, row, id, value)\n    data[rowId] = {\n      ...data[rowId], \n      [id]: value\n    }\n    setData([...data])\n  }\n\n  return (\n    <div style = {{width: '80vw', height: 'calc(100vh - 80px)', margin: '0 auto'}}>\n<button onClick = {() => setState(Math.random())}>REFRESH</button>\n        <Grid \n          // key = {state}\n          cols = {cols}\n          data = {data}\n          // commit = {onCommit}\n\n          onChange = {onChange}\n\n          width = {700}\n          height = {400}\n        />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}